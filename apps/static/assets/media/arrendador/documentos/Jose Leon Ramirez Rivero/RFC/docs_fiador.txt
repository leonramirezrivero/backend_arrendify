vista fo

class DocumentosFoo(viewsets.ModelViewSet):
    # authentication_classes = [TokenAuthentication, SessionAuthentication]
    # permission_classes = [IsAuthenticated]
    queryset = DocumentosFiador.objects.all()
    serializer_class = DFSerializer
   
    
    def list(self, request, *args, **kwargs):
        content = {
            'user': str(request.user),
            'auth': str(request.auth),
        }
        queryset = self.filter_queryset(self.get_queryset())
        FiadorSerializers = self.get_serializer(queryset, many=True)
       
        return Response(FiadorSerializers.data ,status=status.HTTP_200_OK)
    
    def create (self, request, *args,**kwargs):
        
        user_session = str(request.user.id)
        print(user_session)
        try: 
            data = request.data
            print("primer print",data)
            data = {
                    "Ine": request.FILES.get('Ine', None),
                    "Comp_dom": request.FILES.get('Comp_dom', None),
                    "Escrituras": request.FILES.get('Escrituras', None),
                    "Estados_cuenta": request.FILES.get('Estados_cuenta', None),
                    "Fiador":request.data['Fiador'],
                    "user":user_session
                }
            print("segundo print",data)
            if data:
                documentos_serializer = self.get_serializer(data=data)
                documentos_serializer.is_valid(raise_exception=True)
                documentos_serializer.save()
                return Response(documentos_serializer.data, status=status.HTTP_201_CREATED)
            else:
                return Response({'error': 'No file provided'}, status=status.HTTP_400_BAD_REQUEST)
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
        

    def destroy(self, request, pk=None, *args, **kwargs):
        # try:
        documentos_fiador = self.get_object()
        documento_fiador_serializer = self.serializer_class(documentos_fiador)
        print("Soy ine", documento_fiador_serializer.data['ine'])
        print("1")
        if documentos_fiador:
            ine = documento_fiador_serializer.data['ine']
            print("Soy ine 2", ine)
            comp_dom= documento_fiador_serializer.data['comp_dom']
            rfc= documento_fiador_serializer.data['escrituras_titulo']
            print("Soy RFC", rfc)
            ruta_ine = 'apps/static'+ ine
            print("Ruta ine", ruta_ine)
            ruta_comprobante_domicilio = 'apps/static'+ comp_dom
            ruta_rfc = 'apps/static'+ rfc
            print("Ruta com", ruta_comprobante_domicilio)
            print("Ruta RFC", ruta_rfc)
            os.remove(ruta_ine)
            os.remove(ruta_comprobante_domicilio)
            os.remove(ruta_rfc)
            # self.perform_destroy(documentos_arrendador)  #Tambien se puede eliminar asi
            documentos_fiador.delete()
            return Response({'message': 'Archivo eliminado correctamente'}, status=status.HTTP_200_OK)
        else:
            return Response({'message': 'Error al eliminar archivo'}, status=status.HTTP_400_BAD_REQUEST)
        # except Exception as e:
        #     return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
        
        
    def retrieve(self, request, pk=None):
        try:
            documentos = self.queryset #Toma los datos de Inmuebles.objects.all() que esta al inicio de la clase viewset
            fiador = documentos.filter(id=pk)
            serializer_fiador = DISerializer(fiador, many=True)
            print(serializer_fiador.data)
            ine = serializer_fiador.data[0]['ine']
            print(ine)
            # documentos_arrendador = self.get_object()
            # print(documentos_arrendador)
            return Response(serializer_fiador.data)
        except Exception as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
    
    # @action(detail=False, methods=['put'], url_path='actualizar_archivos_individual')
    # def actualizar_archivos_individual(self, request, pk=None, *args, **kwargs):
    #     instance = self.get_object()
    #     print(instance)
    #     data = {}
    #     fields = ['Ine', 'Comp_dom', 'Rfc']

    #     for field in fields:
    #         print("si hay campos",field)
            
    #         if field in request.FILES:
    #             print("si hay campos 2",field)
    #             data[field] = request.FILES[field]
    #             print(data[field])

    #     data['user'] = request.user.id

    #     serializer = self.get_serializer(instance, data=data, partial=True)
    #     if serializer.is_valid(raise_exception=True):
    #         serializer.save()
    #         return Response(serializer.data)
    #     else:
    #         return Response(serializer.errors)
    
    def update(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        print(request.data)
        
        # Verificar si se proporciona un nuevo archivo adjunto
        if 'Ine' in request.data:
            print("soy ine")
            Ine = request.data['Ine']
            instance.Ine = Ine  # Actualizar el archivo adjunto sin eliminar el anterior
            
        if 'Comp_dom' in request.data:
            Comp_dom = request.data['Comp_dom']
            instance.Comp_dom = Comp_dom  # Actualizar el archivo adjunto sin eliminar el anterior
            
        if 'Rfc' in request.data:
            Rfc = request.data['Rfc']
            instance.Rfc = Rfc  # Actualizar el archivo adjunto sin eliminar el anterior
        
        if 'Extras' in request.data:
            Extras = request.data['Extras']
            instance.Extras = Extras  # Actualizar el archivo adjunto sin eliminar el anterior
        
        if 'Ingresos' in request.data:
            Ingresos = request.data['Ingresos']
            instance.Ingresos = Ingresos  # Actualizar el archivo adjunto sin eliminar el anterior
        
        if 'Recomendacion_laboral' in request.data:
            print("si entre")
            Recomendacion_laboral = request.data['Recomendacion_laboral']
            instance.Recomendacion_laboral = Recomendacion_laboral  # Actualizar el archivo adjunto sin eliminar el anterior
        
        serializer.update(instance, serializer.validated_data)
        print(serializer.data['Ine'])# Actualizar el archivo adjunto sin eliminar el anterior
        return Response(serializer.data)
router
router.register(r'documentos_foo', DocumentosFoo, basename='documentos_reg')

class DFSerializer(serializers.ModelSerializer):
    fiador_nombre = serializers.CharField(source='fiador.n_fiador', read_only=True)
    fiador_apellido = serializers.CharField(source='inquilino.apellido', read_only=True)
    fiador_apellido1 = serializers.CharField(source='inquilino.apellido1', read_only=True)
    class Meta:
        model = DocumentosFiador
        fields = '__all__'
Modelo
class DocumentosFiador(models.Model):
    def get_ine_upload_path(self, filename):
        return f'inquilino/Fiador/documentos/{self.Fiador.inquilino}/INE/{filename}'
    
    def get_dom_upload_path(self, filename):
        return f'inquilino/documentos/prueba/Comprobante_de_domicilio/{filename}'
    
    def get_rfc_upload_path(self, filename):
        return f'inquilino/documentos/prueba/RFC/{filename}'
    
    id = models.AutoField(primary_key=True)
    user=models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    Fiador = models.ForeignKey(Fiador_obligado, null=True, blank=True, on_delete=models.CASCADE,related_name="archivos")
    #Obligado y fiador
    Ine = models.FileField(upload_to=get_ine_upload_path)
    Comp_dom = models.FileField(upload_to =get_dom_upload_path)
    #obligado
    Estado_cuenta = models.FileField(null=True, blank=True,upload_to = get_rfc_upload_path)
    #fiador
    Escrituras = models.FileField(null=True, blank=True,upload_to = get_rfc_upload_path)
    dateTimeOfUpload = models.DateTimeField(auto_now = True)
    class Meta:
        db_table = 'documentos_fiador'
